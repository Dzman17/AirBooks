Class: DBHandler

----- Account Funtions -----
public bool createAccount(Account account)
//creates a new account in the DB
public bool deleteAccount(Account account)
//deletes a specified Account from the DB
public Account getAccountInfo(string email, string password)
//retrieves the information in a specified Account from the DB
public bool checkEmail(string email)
//returns true if an account has the specified email and false otherwise
----------------------------

----- Flight Functions -----
public Flight getFlight(string destination, DateTime start, DateTime end, int position)
//returns a flight from the database, used in for loops with "position" as an iterator (position = i)
public Flight getFlight(int flightID)
//returns a single flight, used in reference to tickets
public Flight getAnyFlight(int position)
//returns flight objects in the sequence they are stored in the DB
//position acts as an iterator
public int findNewFlightID()
//returns a flightID that is not in the database
public bool addFlight(Flight flight)
//adds a flight to the DB
public bool cancelFlight(int flightID)
//removes a flight from the DB
public int getOccupancy(int flightID)
//returns how many seats are taken on a given flight
----------------------------

----- Ticket Functions -----
public Ticket getTicket(string ownerEmail, int position)
//returns a ticket, taking user email and position as an iterator
public Ticket getTicket(int flightID, int position)
//returns a ticket, taking flight ID and position as an iterator
public bool addTicket(Ticket ticket)
//adds a ticket to the DB
public bool cancelTicket(Ticket ticket)
//removes a ticket from the DB
----------------------------

--------- Structs ----------

public struct Account {
        public Account(string email, string password, string firstName, string lastName, char accountType = 'c') {
            this.email = email;
            this.password = password;
            this.firstName = firstName;
            this.lastName = lastName;
            /* Specifies the account type that all new accounts will be assigned.
             * Must be changed during instalation to allow for the creation of other account types.
             * 'c' = customer, 'e' = employee, 'm' = manager
             */
            this.accountType = accountType;
        }

        public string email;
        public string password;
        public string firstName;
        public string lastName;
        public char accountType;
    }

    public struct Flight {
        public Flight(int flightID, DateTime time, string destination, int rows, int columns, 
                    double price, double luggageMax, double currentLuggage) { 
            this.flightID = flightID;
            this.time = time;
            this.destination = destination;
            this.rows = rows;
            this.columns = columns;
            this.price = price;
            this.luggageMax = luggageMax;
            this.currentLuggage = currentLuggage;
        }

        public int flightID;
        public DateTime time;
        public string destination;
        public int rows;
        public int columns;
        public double price;
        public double luggageMax;
        public double currentLuggage;
    }

    public struct Ticket {
        public Ticket(int seatID, int flightID, string ownerEmail) {
            this.seatID = seatID;
            this.flightID = flightID;
            this.ownerEmail = ownerEmail;
        }

        public int seatID;
        public int flightID;
        public string ownerEmail;
    }
